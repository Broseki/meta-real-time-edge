From 9457e9e6ac95bdb526f99cc695a39fc4cfa3106a Mon Sep 17 00:00:00 2001
From: Xiaoliang Yang <xiaoliang.yang_1@nxp.com>
Date: Mon, 19 Sep 2022 15:37:08 +0800
Subject: [PATCH] lldpd: decode Additional Ethernet Capabilities

The preemption capability is enabled in the transmit direction only if
it is determined that the link partner supports the preemption capability.

This patch adds the decode of Additional Ethernet Capabilities TLV,
enable the preemption of local port when the preemption status of
partner is enabled, and send an updated lldp frame to the partner.

Signed-off-by: Xiaoliang Yang <xiaoliang.yang_1@nxp.com>
---
 include/linux/ethtool.h       |  4 ++++
 src/daemon/interfaces-linux.c |  4 ++--
 src/daemon/protocols/lldp.c   | 37 ++++++++++++++++++++++++++++++-----
 3 files changed, 38 insertions(+), 7 deletions(-)

diff --git a/include/linux/ethtool.h b/include/linux/ethtool.h
index 65201e2..d96aa63 100644
--- a/include/linux/ethtool.h
+++ b/include/linux/ethtool.h
@@ -344,7 +344,10 @@ struct ethtool_eee {
 struct ethtool_fp {
 	__u32   cmd;
 	__u8    fp_supported;
+	__u8    fp_lldp_verify;
 	__u8    fp_enabled;
+	__u8    fp_status;
+	__u8    fp_active;
 	__u32   supported_queues_mask;
 	__u32   preemptible_queues_mask;
 	__u32   min_frag_size;
@@ -1408,6 +1411,7 @@ enum ethtool_fec_config_bits {
 
 #define ETHTOOL_GFP             0x00000052 /* Get Frame Preemption settings */
 #define ETHTOOL_SFP             0x00000053 /* Set Frame Preemption settings */
+#define ETHTOOL_RFP             0x00000054 /* Reset Frame Preemption settings */
 
 /* compatibility with older code */
 #define SPARC_ETH_GSET		ETHTOOL_GSET
diff --git a/src/daemon/interfaces-linux.c b/src/daemon/interfaces-linux.c
index ef7f3ab..b0ea9e6 100644
--- a/src/daemon/interfaces-linux.c
+++ b/src/daemon/interfaces-linux.c
@@ -566,8 +566,8 @@ iflinux_ethtool_gfp(struct lldpd *cfg, const char *ifname, struct lldpd_dot3_fp
 	}
 
 	p_fp->support = gfp.fp_supported;
-	p_fp->status = gfp.fp_enabled;
-	p_fp->active = gfp.fp_enabled;
+	p_fp->status = gfp.fp_status;
+	p_fp->active = gfp.fp_active;
 	p_fp->frag_size = DIV_ROUND_UP(gfp.min_frag_size, 64) - 1;
 
 	return 0;
diff --git a/src/daemon/protocols/lldp.c b/src/daemon/protocols/lldp.c
index 5337f42..9a932b7 100644
--- a/src/daemon/protocols/lldp.c
+++ b/src/daemon/protocols/lldp.c
@@ -24,6 +24,8 @@
 #include <sys/types.h>
 #include <sys/socket.h>
 #include <sys/ioctl.h>
+#include <linux/ethtool.h>
+#include <linux/sockios.h>
 
 static int
 lldpd_af_to_lldp_proto(int af)
@@ -641,6 +643,7 @@ lldp_decode(struct lldpd *cfg, char *frame, int s,
 {
 	struct lldpd_chassis *chassis;
 	struct lldpd_port *port;
+	struct lldpd_port *lport = &hardware->h_lport;
 	char lldpaddr[ETHER_ADDR_LEN];
 	const char dot1[] = LLDP_TLV_ORG_DOT1;
 	const char dot3[] = LLDP_TLV_ORG_DOT3;
@@ -665,6 +668,9 @@ lldp_decode(struct lldpd *cfg, char *frame, int s,
 #ifdef ENABLE_CUSTOM
 	struct lldpd_custom *custom = NULL;
 #endif
+	u_int8_t fp_tlv;
+	struct ethtool_fp sfp;
+	struct ifreq ifr = {};
 
 	log_debug("lldp", "receive LLDP PDU on %s",
 	    hardware->h_ifname);
@@ -969,6 +975,11 @@ lldp_decode(struct lldpd *cfg, char *frame, int s,
 					    pi, p_entries);
 					pi = NULL;
 					break;
+				case LLDP_TLV_DOT1_LA:
+					CHECK_TLV_SIZE(9, "Link aggregation");
+					PEEK_DISCARD_UINT8;
+					port->p_aggregid = PEEK_UINT32;
+					break;
 				default:
 					/* Unknown Dot1 TLV, ignore it */
 					hardware->h_rx_unrecognized_cnt++;
@@ -980,6 +991,27 @@ lldp_decode(struct lldpd *cfg, char *frame, int s,
 #else
 				/* Dot3 */
 				switch (tlv_subtype) {
+				case LLDP_TLV_DOT3_FP:
+					CHECK_TLV_SIZE(6, "IEEE 802.3br");
+					fp_tlv = PEEK_UINT16;
+					port->p_fp.support = fp_tlv & 0x1;
+					port->p_fp.status = (fp_tlv & 0x2) >> 1;
+					port->p_fp.active = (fp_tlv & 0x4) >> 2;
+					port->p_fp.frag_size = (fp_tlv & 0x18) >> 3;
+					if (lport->p_fp.status &&
+					    port->p_fp.status &&
+					    !lport->p_fp.active) {
+						strlcpy(ifr.ifr_name, hardware->h_ifname, sizeof(ifr.ifr_name));
+						sfp.cmd = ETHTOOL_RFP;
+						ifr.ifr_data = (caddr_t)&sfp;
+						ioctl(cfg->g_sock, SIOCETHTOOL, &ifr);
+
+						if (!port->p_fp.active) {
+							lldpd_update_localports(cfg);
+							lldp_send(cfg, hardware);
+						}
+					}
+					break;
 				case LLDP_TLV_DOT3_MAC:
 					CHECK_TLV_SIZE(9, "MAC/PHY");
 					port->p_macphy.autoneg_support = PEEK_UINT8;
@@ -991,11 +1023,6 @@ lldp_decode(struct lldpd *cfg, char *frame, int s,
 					    PEEK_UINT16;
 					port->p_macphy.mau_type = PEEK_UINT16;
 					break;
-				case LLDP_TLV_DOT3_LA:
-					CHECK_TLV_SIZE(9, "Link aggregation");
-					PEEK_DISCARD_UINT8;
-					port->p_aggregid = PEEK_UINT32;
-					break;
 				case LLDP_TLV_DOT3_MFS:
 					CHECK_TLV_SIZE(6, "MFS");
 					port->p_mfs = PEEK_UINT16;
-- 
2.17.1

