From 39c0dc6029a71f2335e4449cad32de6d75ae9816 Mon Sep 17 00:00:00 2001
From: Jan Kiszka <jan.kiszka@siemens.com>
Date: Wed, 30 Dec 2020 23:47:59 +0100
Subject: [PATCH 4/7] arm-common: Add handling of SMCCC_ARCH_WORKAROUND_2
 requests

Jailhouse does not need this workaround as it isolates secrets via
CPU and, thus, cell-private mappings. However, guests may request
control over the workaround. As it is per CPU, we can grant access.

Signed-off-by: Jan Kiszka <jan.kiszka@siemens.com>
---
 hypervisor/arch/arm-common/include/asm/percpu.h | 3 ++-
 hypervisor/arch/arm-common/smccc.c              | 9 ++++++++-
 2 files changed, 10 insertions(+), 2 deletions(-)

diff --git a/hypervisor/arch/arm-common/include/asm/percpu.h b/hypervisor/arch/arm-common/include/asm/percpu.h
index 4b37e1be..a3e38fa0 100644
--- a/hypervisor/arch/arm-common/include/asm/percpu.h
+++ b/hypervisor/arch/arm-common/include/asm/percpu.h
@@ -16,7 +16,8 @@
 #define STACK_SIZE			PAGE_SIZE
 
 #define ARM_PERCPU_FIELDS						\
-	bool smccc_has_workaround_1;
+	bool smccc_has_workaround_1;					\
+	bool smccc_has_workaround_2;
 
 #define ARCH_PUBLIC_PERCPU_FIELDS					\
 	unsigned long mpidr;						\
diff --git a/hypervisor/arch/arm-common/smccc.c b/hypervisor/arch/arm-common/smccc.c
index ca4a3e0d..4d5fe309 100644
--- a/hypervisor/arch/arm-common/smccc.c
+++ b/hypervisor/arch/arm-common/smccc.c
@@ -71,8 +71,10 @@ void smccc_discover(void)
 		return;
 
 	ret = smc_arg1(SMCCC_ARCH_FEATURES, SMCCC_ARCH_WORKAROUND_1);
-
 	this_cpu_data()->smccc_has_workaround_1 = ret >= ARM_SMCCC_SUCCESS;
+
+	ret = smc_arg1(SMCCC_ARCH_FEATURES, SMCCC_ARCH_WORKAROUND_2);
+	this_cpu_data()->smccc_has_workaround_2 = ret >= ARM_SMCCC_SUCCESS;
 }
 
 static inline long handle_arch_features(u32 id)
@@ -104,6 +106,11 @@ static enum trap_return handle_arch(struct trap_context *ctx)
 		*ret = handle_arch_features(ctx->regs[1]);
 		break;
 
+	case SMCCC_ARCH_WORKAROUND_2:
+		if (!this_cpu_data()->smccc_has_workaround_2)
+			return ARM_SMCCC_NOT_SUPPORTED;
+		return smc_arg1(SMCCC_ARCH_WORKAROUND_2, ctx->regs[1]);
+
 	default:
 		panic_printk("Unhandled SMC arch trap %lx\n", *ret);
 		return TRAP_UNHANDLED;
-- 
2.17.1

