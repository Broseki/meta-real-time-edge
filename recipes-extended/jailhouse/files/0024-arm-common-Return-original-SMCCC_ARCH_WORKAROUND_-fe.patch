From 900404e9403f06739a0054ba1fe9c1f2140ed756 Mon Sep 17 00:00:00 2001
From: Jan Kiszka <jan.kiszka@siemens.com>
Date: Wed, 30 Dec 2020 18:12:10 +0100
Subject: [PATCH 5/7] arm-common: Return original SMCCC_ARCH_WORKAROUND_*
 feature queries codes

This adds full support for SMCCC_ARCH_WORKAROUND_2 and ensures that
there is no deviation between features reported before and after
enabling Jailhouse.

Signed-off-by: Jan Kiszka <jan.kiszka@siemens.com>
---
 .../arch/arm-common/include/asm/percpu.h      |  4 ++--
 hypervisor/arch/arm-common/smccc.c            | 19 ++++++++++++-------
 hypervisor/arch/arm64/setup.c                 |  2 +-
 3 files changed, 15 insertions(+), 10 deletions(-)

diff --git a/hypervisor/arch/arm-common/include/asm/percpu.h b/hypervisor/arch/arm-common/include/asm/percpu.h
index a3e38fa0..a3697641 100644
--- a/hypervisor/arch/arm-common/include/asm/percpu.h
+++ b/hypervisor/arch/arm-common/include/asm/percpu.h
@@ -16,8 +16,8 @@
 #define STACK_SIZE			PAGE_SIZE
 
 #define ARM_PERCPU_FIELDS						\
-	bool smccc_has_workaround_1;					\
-	bool smccc_has_workaround_2;
+	int smccc_feat_workaround_1;					\
+	int smccc_feat_workaround_2;
 
 #define ARCH_PUBLIC_PERCPU_FIELDS					\
 	unsigned long mpidr;						\
diff --git a/hypervisor/arch/arm-common/smccc.c b/hypervisor/arch/arm-common/smccc.c
index 4d5fe309..c87b9fb1 100644
--- a/hypervisor/arch/arm-common/smccc.c
+++ b/hypervisor/arch/arm-common/smccc.c
@@ -46,8 +46,12 @@ static void trust_dispatch(struct trap_context *ctx)
 
 void smccc_discover(void)
 {
+	struct per_cpu *cpu_data = this_cpu_data();
 	int ret;
 
+	cpu_data->smccc_feat_workaround_1 = ARM_SMCCC_NOT_SUPPORTED;
+	cpu_data->smccc_feat_workaround_2 = ARM_SMCCC_NOT_SUPPORTED;
+
 	ret = smc(PSCI_0_2_FN_VERSION);
 
 	/* We need >=PSCIv1.0 for SMCCC. Against the spec, U-Boot may also
@@ -70,11 +74,11 @@ void smccc_discover(void)
 	if (ret != ARM_SMCCC_SUCCESS)
 		return;
 
-	ret = smc_arg1(SMCCC_ARCH_FEATURES, SMCCC_ARCH_WORKAROUND_1);
-	this_cpu_data()->smccc_has_workaround_1 = ret >= ARM_SMCCC_SUCCESS;
+	cpu_data->smccc_feat_workaround_1 =
+		smc_arg1(SMCCC_ARCH_FEATURES, SMCCC_ARCH_WORKAROUND_1);
 
-	ret = smc_arg1(SMCCC_ARCH_FEATURES, SMCCC_ARCH_WORKAROUND_2);
-	this_cpu_data()->smccc_has_workaround_2 = ret >= ARM_SMCCC_SUCCESS;
+	cpu_data->smccc_feat_workaround_2 =
+		smc_arg1(SMCCC_ARCH_FEATURES, SMCCC_ARCH_WORKAROUND_2);
 }
 
 static inline long handle_arch_features(u32 id)
@@ -84,8 +88,9 @@ static inline long handle_arch_features(u32 id)
 		return ARM_SMCCC_SUCCESS;
 
 	case SMCCC_ARCH_WORKAROUND_1:
-		return this_cpu_data()->smccc_has_workaround_1 ?
-			ARM_SMCCC_SUCCESS : ARM_SMCCC_NOT_SUPPORTED;
+		return this_cpu_data()->smccc_feat_workaround_1;
+	case SMCCC_ARCH_WORKAROUND_2:
+		return this_cpu_data()->smccc_feat_workaround_2;
 
 	default:
 		return ARM_SMCCC_NOT_SUPPORTED;
@@ -107,7 +112,7 @@ static enum trap_return handle_arch(struct trap_context *ctx)
 		break;
 
 	case SMCCC_ARCH_WORKAROUND_2:
-		if (!this_cpu_data()->smccc_has_workaround_2)
+		if (this_cpu_data()->smccc_feat_workaround_2 < 0)
 			return ARM_SMCCC_NOT_SUPPORTED;
 		return smc_arg1(SMCCC_ARCH_WORKAROUND_2, ctx->regs[1]);
 
diff --git a/hypervisor/arch/arm64/setup.c b/hypervisor/arch/arm64/setup.c
index 57b25dbc..a24bf1d7 100644
--- a/hypervisor/arch/arm64/setup.c
+++ b/hypervisor/arch/arm64/setup.c
@@ -66,7 +66,7 @@ int arch_cpu_init(struct per_cpu *cpu_data)
 		return err;
 
 	/* Conditionally switch to hardened vectors */
-	if (this_cpu_data()->smccc_has_workaround_1)
+	if (this_cpu_data()->smccc_feat_workaround_1 >= ARM_SMCCC_SUCCESS)
 		arm_write_sysreg(vbar_el2, &hyp_vectors_hardened);
 
 	return 0;
-- 
2.17.1

