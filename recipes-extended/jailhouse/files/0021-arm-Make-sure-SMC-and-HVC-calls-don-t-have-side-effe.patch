From d6d79f71e9f640e47cfe14bc8903e40b616f73b2 Mon Sep 17 00:00:00 2001
From: Oliver Schwartz <Oliver.Schwartz@gmx.de>
Date: Wed, 16 Sep 2020 15:09:04 +0200
Subject: [PATCH 2/7] arm: Make sure SMC and HVC calls don't have side effects

SMC/HVC calls may modify registers r0 to r3. To make sure the compiler
doesn't assume input registers to be constant, also mark these registers
as output when used as input.

Signed-off-by: Oliver Schwartz <Oliver.Schwartz@gmx.de>
[Jan: rebased on next, style]
Signed-off-by: Jan Kiszka <jan.kiszka@siemens.com>
---
 hypervisor/arch/arm/include/asm/smc.h      | 10 ++++------
 include/arch/arm/asm/jailhouse_hypercall.h | 17 ++++++++---------
 2 files changed, 12 insertions(+), 15 deletions(-)

diff --git a/hypervisor/arch/arm/include/asm/smc.h b/hypervisor/arch/arm/include/asm/smc.h
index 5cde3d8b..0f5e857f 100644
--- a/hypervisor/arch/arm/include/asm/smc.h
+++ b/hypervisor/arch/arm/include/asm/smc.h
@@ -18,9 +18,8 @@ static inline int smc(unsigned long id)
 	register unsigned long __id asm("r0") = id;
 
 	asm volatile ("smc #0\n\t"
-		: "=r" (__id)
-		: "r"(__id)
-		: "memory", "r1", "r2", "r3");
+		: "+r" (__id)
+		: : "memory", "r1", "r2", "r3");
 
 	return __id;
 }
@@ -31,9 +30,8 @@ static inline int smc_arg1(unsigned long id, unsigned long par1)
 	register unsigned long __par1 asm("r1") = par1;
 
 	asm volatile ("smc #0\n\t"
-		: "=r" (__id)
-		: "r"(__id), "r"(__par1)
-		: "memory", "r2", "r3");
+		: "+r" (__id), "+r" (__par1)
+		: : "memory", "r2", "r3");
 
 	return __id;
 }
diff --git a/include/arch/arm/asm/jailhouse_hypercall.h b/include/arch/arm/asm/jailhouse_hypercall.h
index aabd66ba..4a16ab19 100644
--- a/include/arch/arm/asm/jailhouse_hypercall.h
+++ b/include/arch/arm/asm/jailhouse_hypercall.h
@@ -43,6 +43,7 @@
 #define JAILHOUSE_CALL_NUM_RESULT	"r0"
 #define JAILHOUSE_CALL_ARG1		"r1"
 #define JAILHOUSE_CALL_ARG2		"r2"
+#define JAILHOUSE_CALL_CLOBBERED	"r3"
 
 /* CPU statistics, arm-specific part */
 #define JAILHOUSE_CPU_STAT_VMEXITS_CP15		JAILHOUSE_GENERIC_CPU_STATS + 5
@@ -56,9 +57,9 @@ static inline __u32 jailhouse_call(__u32 num)
 
 	asm volatile(
 		JAILHOUSE_CALL_INS
-		: "=r" (num_result)
-		: "r" (num_result)
-		: "memory");
+		: "+r" (num_result)
+		: : "memory", JAILHOUSE_CALL_ARG1, JAILHOUSE_CALL_ARG2,
+		    JAILHOUSE_CALL_CLOBBERED);
 	return num_result;
 }
 
@@ -69,9 +70,8 @@ static inline __u32 jailhouse_call_arg1(__u32 num, __u32 arg1)
 
 	asm volatile(
 		JAILHOUSE_CALL_INS
-		: "=r" (num_result)
-		: "r" (num_result), "r" (__arg1)
-		: "memory");
+		: "+r" (num_result), "+r" (__arg1)
+		: : "memory", JAILHOUSE_CALL_ARG2, JAILHOUSE_CALL_CLOBBERED);
 	return num_result;
 }
 
@@ -83,9 +83,8 @@ static inline __u32 jailhouse_call_arg2(__u32 num, __u32 arg1, __u32 arg2)
 
 	asm volatile(
 		JAILHOUSE_CALL_INS
-		: "=r" (num_result)
-		: "r" (num_result), "r" (__arg1), "r" (__arg2)
-		: "memory");
+		: "+r" (num_result), "+r" (__arg1), "+r" (__arg2)
+		: : "memory", JAILHOUSE_CALL_CLOBBERED);
 	return num_result;
 }
 
-- 
2.17.1

